package com.simple.designpattern.strategy;

/**
 * 策略模式
 * 在之前的工厂模式中，为了创建不同的产品使用了switch case/if else的形式实现代码，这样违背了开闭原则，即对扩展开放，对修改关闭
 * 维护的成本会随着case/else的增加而增加，而本文的策略模式能较好的解决这个问题
 * <p>
 * 定义：使用一系列的算法，把他们一个个封装起来，并且使它们可相互替换。策略模式让算法独立于它的使用者之外，可以自由修改。
 * <p>
 * Strategy是使用接口还是抽象类，这个取决于一系列的策略中是都有共同的共同属性或方法；如果没有，使用接口更加灵活方便，反之使用抽象类，抽象类中可存放公共的属性以及方法
 * <p>
 * Created by hych on 2018/6/20 14:12.
 */
public class Strategy {

}
