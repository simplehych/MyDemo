package com.simple.designpattern;

/**
 * 面向对象的基本六大原则
 * Created by hych on 2018/6/20 08:32.
 */
public class Principle {

    /**
     * Single Responsibility Principle
     * 单一职责原则，就一个类而言，应该只有一个引起它变化的原因。
     * 简单说，一个类应该是一组高度相关的函数，数据的封装；也就是高内聚。
     */
    void SRP() {

    }

    /**
     * Open Close Principle
     * 开闭原则，是java中最基础的设计原则，指导我们建立一个稳定的，灵活的系统。
     * 定义：软件中的对象应该对扩展是开放的，对修改是封闭的。
     */
    void OCP() {

    }

    /**
     * Liskov Substitution Principle
     * 里氏替换原则，-抽象
     */
    void LSP() {

    }

    /**
     * Dependence Inversion Principle
     * 依赖倒置原则，一种特定的形式，使得高层次的模块不依赖低层次的模块的实现细节的目的，依赖模块被颠倒了。
     * <p>
     * 依赖倒置原则的几个关键点：
     * 1. 高层模块不应该依赖低层模块，两者都应该依赖骑抽象
     * 2. 抽象不应该依赖细节
     * 3. 细节应该依赖抽象
     * <p>
     * 所谓的高层模块就是调用端，低层模块就是具体实现类。
     * 依赖倒置原则在java语言中的表现就是：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，通过接口或抽象类产生依赖关系。
     * 依赖关系其实就是相互之间的调用关系，概括来说就是面向接口编程，或者面向抽象编程
     */
    void DIP() {

    }

    /**
     * Interface Segregation Principle
     * 接口隔离原则，接口隔离原则将非常庞大，臃肿的接口拆分成为更小更具体的接口
     * 目的是接口，这种原则的做法和单一原则有点相似，就是说接口中的方法保持更高的相关性、尽量少、避免掉不需要的方法
     */
    void ISP(){

    }

    /**
     * Law of Principle
     * 迪米特原则，最少知识原则，一个对象应该对其他对象有最少的了解。通俗的讲，一个类要对自己需要调用的类知道的最少，
     * 类的内部如何实现、如何复杂都与调用者(依赖者)没有关系，调用者只需要知道他需要的方法，其他的不需要关心，类与类之间的关系越密切，耦合度越大；
     * 当一个类发生改变时，对另一个类影响越大。
     *
     * 迪米特法则还有一个英文解释是，Only talk to your immediate friends
     * 翻译过来就是：只与直接的朋友交流
     */
    void LOP(){

    }
}
