package com.simple.designpattern.singleton;

/**
 * 单例模式
 * 保证只有一个实例存在
 * 例如：数据库等资源，创建一个对象消耗过多资源
 * <p>
 * 实现单例模式的几个关键点：
 * 1. 构造函数私有化
 * 2. 通过静态方法或枚举返回单例对象
 * 3. 确保单例类的对象有且只有一个，尤其是多线程环境写
 * 4. 确保单例类的对象在反序列是不会重新构建对象
 * <p>
 * 优点：
 * 1. 只存在一个实例，减少了内存开支，减少了系统的性能开销
 * 2. 避免了资源的多重占用
 * 3. 全局的访问点，优化和共享资源访问
 * 缺点：
 * 1. 没有接口，难扩展，只能修改代码
 * 2. 如果持有Context容易造成内存泄漏
 * <p>
 * Created by hych on 2018/6/20 09:26.
 */
public class Singleton {
}
